version: '3.8'

services:
  redis:
    image: redis:alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    networks:
      - crypto-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - redis-data:/data
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: crypto-redis-exporter
    networks:
      - crypto-net
    depends_on:
      - redis
    command: --redis.addr=redis://redis:6379
    restart: unless-stopped

  market-monitor:
    build: .
    container_name: crypto-market-monitor
    command: python3 services/market_monitor_service.py
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_PORT=${MARKET_MONITOR_PORT}
      - ENABLE_METRICS=true
    ports:
      - "${MARKET_MONITOR_PORT}:${MARKET_MONITOR_PORT}"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-market-monitor", "${MARKET_MONITOR_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  trade-executor:
    build: .
    container_name: crypto-trade-executor
    command: python3 services/trade_executor_service.py
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_PORT=${TRADE_EXECUTOR_PORT}
      - ENABLE_METRICS=true
    ports:
      - "${TRADE_EXECUTOR_PORT}:${TRADE_EXECUTOR_PORT}"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
      market-monitor:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-trade-executor", "${TRADE_EXECUTOR_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  ai-analyzer:
    build: .
    container_name: crypto-ai-analyzer
    command: python3 services/ai_analyzer_service.py
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_PORT=${AI_ANALYZER_PORT}
      - ENABLE_METRICS=true
    ports:
      - "${AI_ANALYZER_PORT}:${AI_ANALYZER_PORT}"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
      market-monitor:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-ai-analyzer", "${AI_ANALYZER_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  strategy-evolution:
    build: .
    container_name: crypto-strategy-evolution
    command: python3 services/strategy_evolution_service.py
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_PORT=${STRATEGY_EVOLUTION_PORT}
      - ENABLE_METRICS=true
    ports:
      - "${STRATEGY_EVOLUTION_PORT}:${STRATEGY_EVOLUTION_PORT}"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./data:/app/data
      - ./strategies:/app/strategies
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
      market-monitor:
        condition: service_healthy
      ai-analyzer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-strategy-evolution", "${STRATEGY_EVOLUTION_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  dashboard:
    build: .
    container_name: crypto-dashboard
    command: python3 dashboard.py
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - ENABLE_METRICS=true
    ports:
      - "8050:8050"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-dashboard", "8050"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    
  backtesting:
    build: .
    container_name: crypto-backtesting
    # No specific command as this is used for running ad-hoc backtests
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LUNARCRUSH_API_KEY=${LUNARCRUSH_API_KEY}
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./backtesting:/app/backtesting
      - ./backtesting/data:/app/backtesting/data
      - ./backtesting/results:/app/backtesting/results
      - ./backtesting/plots:/app/backtesting/plots
    networks:
      - crypto-net
    depends_on:
      - redis
    profiles:
      - tools
    # No auto-start - use docker-compose run backtesting python run_backtest.py [...]

  # AI Model Services
  model-registry:
    build: .
    container_name: crypto-model-registry
    command: python3 run_ai_model_services.py --model-registry
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_PORT=${MODEL_REGISTRY_PORT}
      - ENABLE_METRICS=true
    ports:
      - "${MODEL_REGISTRY_PORT}:${MODEL_REGISTRY_PORT}"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-model-registry", "${MODEL_REGISTRY_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  ai-explainability:
    build: .
    container_name: crypto-ai-explainability
    command: python3 run_ai_model_services.py --explainability
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - SERVICE_PORT=${AI_EXPLAINABILITY_PORT}
      - ENABLE_METRICS=true
    ports:
      - "${AI_EXPLAINABILITY_PORT}:${AI_EXPLAINABILITY_PORT}"
    volumes:
      - ./config.json:/app/config.json
      - ./logs:/app/logs
      - ./data:/app/data
      - ./explanations:/app/explanations
    networks:
      - crypto-net
    depends_on:
      redis:
        condition: service_healthy
      ai-analyzer:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "crypto-ai-explainability", "${AI_EXPLAINABILITY_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - crypto-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: crypto-grafana
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - crypto-net
    depends_on:
      - prometheus
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: crypto-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - crypto-net
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: crypto-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - crypto-net
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    container_name: crypto-logstash
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/app/logs:ro
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - crypto-net
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: crypto-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - crypto-net
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

networks:
  crypto-net:
    driver: bridge

volumes:
  redis-data:
  logs:
  data:
  strategies:
  models:
  explanations:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
